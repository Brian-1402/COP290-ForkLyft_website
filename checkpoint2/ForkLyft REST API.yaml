openapi: 3.0.3
info:
  title: Forklyft - Onling food ordering and rating
  description: |-
    This API performs fetch instructions to retrieve information from the database of food items, restaurants, users and orders.
    It incoporates various attributes such as ratings, prices, addresses, food-categories and decriptions etc

    _This is the first version of the API_
    
    
  termsOfService: http://swagger.io/terms/
  contact:
    email: utkarsh.mask@gmail.com
  version: 1.0.0
externalDocs:
  description: Find out more about us
  url: www.google.com
servers:
  - url: https://forklyft.swagger.io/api/v1
  
paths:
  /user/{userid}:
    get:
      tags:
        - user
      summary: Display the user home page with different reccomendations 
      description: user home page display
      operationId: getUserById
      parameters: 
        - name: userid
          in: path
          description: Numeric id of the user to get
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid ID supplied
        '404':
          description: UserId not found
        '405':
          description: Validation exception

  /user/{userid}/myprofile:
    get:
      tags:
        - user
      summary: finds the data related to the particuar user and displays his contact number, name, etc
      description: profile of the user is displayed
      operationId: findUserById
      parameters:
        - name: userid
          in: path
          description: Numeric id of the user to get
          required: true
          explode: true
          schema:
            type: object
            properties:
              phone number:
                type: string
              user name:
                type: string
              email id:
                type: string
              password: 
                type: string
                format: base64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          

        '400':
          description: Invalid status value
          
  /user/{userid}/myprofile/edit:
    put:
      tags:
        - user
      summary: displays the form to edit user details and on clicking sends a post request
      description: profile of the user to be edited
      operationId: findUserByIdandEdit
      parameters: 
        - name: userid
          in: path
          description: Numeric id of the user to post
          required: true
          explode: true
          schema:
            type: object
            properties:
              phone number:
                type: string
                description: enter phone number
              user name:
                type: string
                description: enter your username
              email id:
                type: string
                description: enter your email-id
              password: 
                type: string
                format: base64
                description: enter your password to be changed
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          

        '400':
          description: Invalid status value
        
  /user/{userid}/address:
    get:
      tags:
        - user
      summary: Display addresses of the user
      description: Displays the different kinds of addresses of user ex- Home, Office, Other
      operationId: findUserById
      parameters:
        - name: userid
          in: path
          description: Numeric id of the user to get
          required: false
          explode: true
          schema:
            type: object
            properties:
              home-address:
                type: string
              work-address:
                type: string
              other-address:
                type: string
              
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid tag value
          
  /user/{userid}/address/edit:
    put:
      tags:
        - user
      summary: help edit addresses of the user
      description: Edits the different kinds of addresses of user ex- Home, Office, Other
      operationId: findUserByIdandEdit
      parameters:
        - name: userid
          in: path
          description: Numeric id of the user to get
          required: false
          explode: true
          schema:
            type: object
            properties:
              home-address:
                type: string
              work-address:
                type: string
              other-address:
                type: string
              
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid tag value
  
  /user/{userid}/myorders:
    get:
      tags:
        - order
      summary: order history
      description: gets the different kinds of orders of users
      operationId: findOrderbyUserId
      parameters:
        - name: userid
          in: path
          description: Numeric id of the user to get
          required: false
          explode: true
          schema:
            type: object
            properties:
              customer_id: 
                type: integer
              order_date:
                type: string
                format: date
              restaurant_id: 
                type: integer
              food_items:
                type: list
              amount:
                type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid tag value
  
  /contactus:
  get:
      tags:
        - contact
      summary: contact us
      description: Contact us page is displayed
      
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid tag value
  
  /contactus/send:
    post:
      tags:
        - contactus
      summary: order history
      description: gets the different kinds of orders of users
      operationId: findOrderbyUserId
      parameters:
        - name: send
          in: path
          description: data to be sent 
          required: false
          explode: true
          schema:
            type: object
            properties:
              name:
                type: string
              email_id:
                type: string
              message:
                type: string
              
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid tag value  
  
  /restaurant/{restaurantid}:
    get:
      tags:
        - restaurant
      summary: display restaurant order history and menu (homepage)
      description: ''
      operationId: findByRestaurantId
      parameters:
        - name: restaurantid
          in: path
          description: numeric id of the restaurant
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'     
        '400':
          description: Invalid tag value  
          
  /restaurant/{restaurantid}/additem:
    get:
      tags:
        - restaurant
      summary: display restaurant add item page
      description: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'     
        '400':
          description: Invalid tag value 

    post:
      tags:
        - restaurant
      summary: add restaurant item
      description: ''
      operationId: findByRestaurantIdandSubmit
      parameters:
        - name: restaurantid
          in: path
          description: numeric id of the restaurant
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'     
        '400':
          description: Invalid tag value  


components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header